name: "Terraform CI/CD"

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell for all steps
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository code
      - name: "Checkout"
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3

      # Configure AWS credentials for the runner
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Initialize a new or existing Terraform working directory
      - name: "Terraform Init"
        run: terraform init

      # Run `terraform plan` on pull requests to validate changes
      - name: "Terraform Plan"
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false

      # Run `terraform apply` on pushes to the main branch
      - name: "Terraform Apply"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false

      # --- Begin new steps for EKS deployment ---
      # Configure kubectl to connect to the new EKS cluster
      - name: "Configure Kubeconfig"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name project-bedrock

      # Deploy the sample application to the EKS cluster
      - name: "Deploy Application"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: kubectl apply -f https://github.com/aws-containers/retail-store-sample-app/releases/latest/download/kubernetes.yaml

      # Wait for all deployments to be ready
      - name: "Wait for Deployments"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: kubectl wait --for=condition=available deployments --all --timeout=120s

      # Get the service information to confirm deployment
      - name: "Get Service Info"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: kubectl get svc ui
      # --- End new steps for EKS deployment ---
